package org.akash.mycglib;

import java.lang.reflect.Method;

import net.sf.cglib.proxy.Enhancer;
import net.sf.cglib.proxy.MethodInterceptor;
import net.sf.cglib.proxy.MethodProxy;

public class FirstProgram {

	/**
	 * 	*** https://dzone.com/articles/cglib-missing-manual
	 * 	*** http://www.artima.com/underthehood/invocationP.html
	 * 	**  http://zeroturnaround.com/rebellabs/java-bytecode-fundamentals-using-objects-and-calling-methods/
	 * 
	 * (1) private , static and final methods are not enhanced.
	 * 
	 * (2) The class generated by cglib will however be in the same package as
	 * the enhanced class (and therefore be able to override package-private
	 * methods).
	 * 
	 * (3) final classes are not enhanced.
	 * 
	 * (4) All cglib classes generate byte code which results in additional
	 * classes being stored in a special section of the JVM's memory: The so
	 * called perm space.
	 * 
	 * (5) Only those methods are proxied that are invokeVirtual.
	 * 		invokeSpecial and invokeStatic methods are not proxied.
	 * 		static methods are invokeStatic
	 * 		constructors, methods called using super keyword and private methods are invokeSpecial
	 * 
	 */

	public static void main(String[] args) {
		try {
			testMethodInterceptor();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void testMethodInterceptor() throws Exception {

		Enhancer enhancer = new Enhancer();
		enhancer.setSuperclass(SampleClass.class);
		enhancer.setCallback(new MethodInterceptor() {

			public Object intercept(Object obj, Method method, Object[] args,
					MethodProxy proxy) throws Throwable {

				System.out.println("intercept");
				if (method.getDeclaringClass() != Object.class
						&& method.getReturnType() == String.class) {

					proxy.invokeSuper(obj, args);
					return "Hello cglib!";

				} else {
					return proxy.invokeSuper(obj, args);
				}
			}
		});
		SampleClass proxy = (SampleClass) enhancer.create();
		System.out.println(proxy.test(null));
		System.out.println(proxy.test1(null));
		System.out.println(proxy.test2(null));
		System.out.println(proxy.test4(null));
	}
}
